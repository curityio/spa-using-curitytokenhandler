services:

  #
  # With this profile the SPA calls all backend components via a Kong API gateway
  #
  api-gateway-kong:
    image: apigateway-kong:1.0.0
    hostname: apigateway-internal
    ports:
      - 80:3001
    volumes:
      - ./apigateway/kong/kong.yml:/usr/local/kong/declarative/kong.yml
    environment:
      KONG_DATABASE: 'off'
      KONG_DECLARATIVE_CONFIG: '/usr/local/kong/declarative/kong.yml'
      KONG_PROXY_LISTEN: '0.0.0.0:3001'
      KONG_LOG_LEVEL: 'info'
      KONG_PLUGINS: 'bundled,cors,oauth-proxy'
    profiles:
      - kong

  #
  # With this profile the SPA calls all backend components via an OpenResty API gateway
  #
  api-gateway-openresty:
    image: apigateway-openresty:1.0.0
    hostname: apigateway-internal
    ports:
      - 80:3001
    volumes:
      - ./apigateway/openresty/nginx.conf:/usr/local/openresty/nginx/conf/nginx.conf
      - ./apigateway/openresty/default.conf:/etc/nginx/conf.d/default.conf
    profiles:
      - openresty
    depends_on:
      keycloak:
        condition: service_started

  #
  # With this profile the SPA calls all backend components via an NGINX API gateway
  #
  api-gateway-nginx:
    image: apigateway-nginx:1.0.0
    hostname: apigateway-internal
    ports:
      - 80:3001
    volumes:
      - ./apigateway/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./apigateway/nginx/default.conf:/etc/nginx/templates/default.conf.template
    profiles:
      - nginx
    depends_on:
      keycloak:
        condition: service_started

  #
  # The OAuth Agent is the backend for frontend component for the SPA
  #
  oauth-agent:
    image: curity.azurecr.io/curity/idsvr:latest
    hostname: bff-internal
    extra_hosts:
      - login.example.com:host-gateway
    ports:
      - 6749:6749
    volumes:
      - ../../license.json:/opt/idsvr/etc/init/license/license.json
      - ./oauthagent/config-backup.xml:/opt/idsvr/etc/init/config.xml
    environment:
      ADMIN: 'true'
      LOGGING_LEVEL: 'INFO'
      OAUTH_PROXY_TYPE: "${OAUTH_PROXY_TYPE}"
      SYMMETRIC_KEY: "${SYMMETRIC_KEY}"
      TH_COOKIE_CERT: "${TH_COOKIE_CERT}"

  #
  # The web static content host
  #
  webhost:
    image: webhost:1.0.0
    hostname: webhost-internal
    volumes:
      - ./webhost/config.json:/usr/webhost/config.json
      - ./spa/config.json:/usr/webhost/content/config.json
    environment:
      NODE_ENV: 'production'

  #
  # The SPA accesses its API via the API gateway at http://api.example.com/api
  #
  example-api:
    image: example-api:1.0.0
    hostname: api-internal
    volumes:
      - ./api/config.json:/usr/api/config.json

  #
  # Keycloak is used as the external authorization server
  #
  keycloak:
    image: quay.io/keycloak/keycloak:25.0.1
    hostname: login-internal
    ports:
    - 8080:8080
    environment:
      KC_HOSTNAME: 'http://login.example.com'
      KC_HOSTNAME_STRICT: 'false'
      KC_HTTP_ENABLED: 'true'
      KC_HTTPS_ENABLED: 'false'
      KC_HEALTH_ENABLED: 'true'
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: Password1
      KC_LOG_LEVEL: INFO
      KC_DB: postgres
      KC_DB_URL_HOST: keycloak-dbserver
      KC_DB_URL_DATABASE: keycloak
      KC_DB_USERNAME: postgres
      KC_DB_PASSWORD: Password1
    volumes:
      - ./keycloak/data/import/:/opt/keycloak/data/import
    command:
      - start-dev
      - --import-realm
    depends_on:
      keycloakdata:
        condition: service_healthy

  #
  # Keycloak's data includes preshipped user accounts
  #
  keycloakdata:
    image: postgres:17.4
    hostname: keycloak-dbserver
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: Password1
      POSTGRES_DB: keycloak
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 50
